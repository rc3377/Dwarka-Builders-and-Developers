
@mixin flexbox {
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		box-direction: reverse;
		box-orient: horizontal;
	} @else if $value == column {
		box-direction: normal;
		box-orient: vertical;
	} @else if $value == column-reverse {
		box-direction: reverse;
		box-orient: vertical;
	} @else {
		box-direction: normal;
		box-orient: horizontal;
	}
	flex-direction: $value;
}
	// Shorter version:
	@mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	flex-wrap: $value;
	@if $value == nowrap {
		flex-wrap: none;
	} @else { 
		flex-wrap: $value; 
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------


@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	flex-flow: $values;
}

//----------------------------------------------------------------------


@mixin order($int: 0) {
	box-ordinal-group: $int + 1;
	order: $int;
	order: $int;
	flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------


@mixin flex-grow($int: 0) {
	flex-grow: $int;
}

//----------------------------------------------------------------------

@mixin flex-shrink($int: 1) {
	flex-shrink: $int;
}

//----------------------------------------------------------------------


@mixin flex-basis($value: auto) {
	flex-basis: $value;
}

//----------------------------------------------------------------------


@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	box-flex: $fg-boxflex;
	flex: $fg $fs $fb;
	box-flex: $fg-boxflex;
	flex: $fg $fs $fb;
	flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------


@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		box-pack: start;
		flex-pack: start;
	} @else if $value == flex-end {
		box-pack: end;
		flex-pack: end;
	} @else if $value == space-between {
		box-pack: justify;
		flex-pack: justify;
	} @else if $value == space-around {
		flex-pack: distribute;		
	} @else {
		box-pack: $value;
		flex-pack: $value;
	}
	justify-content: $value;
}
	// Shorter version:
	@mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------


@mixin align-items($value: stretch) {
	@if $value == flex-start {
		box-align: start;
		flex-align: start;
	} @else if $value == flex-end {
		box-align: end;
		flex-align: end;
	} @else {
		box-align: $value;
		flex-align: $value;
	}
	align-items: $value;
}



@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	align-self: $value;
	align-self: $value;
	@if $value == flex-start {
		flex-item-align: start;
	} @else if $value == flex-end {
		flex-item-align: end;
	} @else {
		flex-item-align: $value;
	}
	align-self: $value;
}


@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	align-content: $value;
	align-content: $value;
	@if $value == flex-start {
		flex-line-pack: start;
	} @else if $value == flex-end {
		flex-line-pack: end;
	} @else {
		flex-line-pack: $value;
	}
	align-content: $value;
}
